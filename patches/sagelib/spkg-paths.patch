diff --git a/src/module_list.py b/src/module_list.py
index ee5370b..3d79151 100644
--- a/src/module_list.py
+++ b/src/module_list.py
@@ -1,9 +1,6 @@
 import os
 from glob import glob
 from distutils.extension import Extension
-from sage.env import SAGE_LOCAL
-
-SAGE_INC = os.path.join(SAGE_LOCAL, 'include')
 
 #########################################################
 ### pkg-config setup
@@ -456,7 +453,7 @@ ext_modules = [
 
     OptionalExtension('sage.libs.coxeter3.coxeter',
               sources = ['sage/libs/coxeter3/coxeter.pyx'],
-              include_dirs = [os.path.join(SAGE_INC, 'coxeter')],
+              include_dirs = [os.path.join(os.environ.get('COEXTER_DIR', ''), 'include', 'coxeter')],
               language="c++",
               libraries = ['coxeter3'],
               package = 'coxeter3'),
@@ -789,14 +786,14 @@ ext_modules = [
               library_dirs = m4ri_library_dirs + gd_library_dirs + png_library_dirs + zlib_library_dirs,
               include_dirs = m4ri_include_dirs + gd_include_dirs + png_include_dirs + zlib_include_dirs,
               extra_compile_args = m4ri_extra_compile_args,
-              depends = [SAGE_INC + "/png.h", SAGE_INC + "/m4ri/m4ri.h"]),
+              depends = [os.environ.get('MATRIX_MOD2_DENSE_DIR', '') + "/include/png.h", os.environ.get('MATRIX_MOD2_DENSE_DIR', '') + "/include/m4ri/m4ri.h"]),
 
     Extension('sage.matrix.matrix_gf2e_dense',
               sources = ['sage/matrix/matrix_gf2e_dense.pyx'],
               libraries = ['m4rie'] + m4ri_libs + ['m'],
               library_dirs = m4ri_library_dirs,
               include_dirs = m4ri_include_dirs,
-              depends = [SAGE_INC + "/m4rie/m4rie.h"],
+              depends = [os.environ.get('MATRIX_GF2E_DENSE_DIR', '') + "/include/m4rie/m4rie.h"],
               extra_compile_args = m4ri_extra_compile_args),
 
     Extension('sage.matrix.matrix_modn_dense_float',
@@ -829,7 +826,7 @@ ext_modules = [
               libraries = ['iml', 'ntl', 'm'] + cblas_libs,
               library_dirs = cblas_library_dirs,
               include_dirs = cblas_include_dirs,
-              depends = [SAGE_INC + '/m4ri/m4ri.h']),
+              depends = [os.environ.get('M4RI_DIR', '') + '/include/m4ri/m4ri.h']),
 
     Extension('sage.matrix.matrix_rational_sparse',
               sources = ['sage/matrix/matrix_rational_sparse.pyx']),
@@ -967,7 +964,7 @@ ext_modules = [
               library_dirs = m4ri_library_dirs + gd_library_dirs + png_library_dirs,
               include_dirs = m4ri_include_dirs + gd_include_dirs + png_include_dirs,
               extra_compile_args = m4ri_extra_compile_args,
-              depends = [SAGE_INC + "/png.h", SAGE_INC + "/m4ri/m4ri.h"]),
+              depends = [os.environ.get('M4RI_DIR', '') + "/include/png.h", os.environ.get('M4RI_DIR', '') + "/include/m4ri/m4ri.h"]),
 
     Extension('sage.modules.vector_rational_dense',
               sources = ['sage/modules/vector_rational_dense.pyx']),
@@ -1030,14 +1027,14 @@ ext_modules = [
     OptionalExtension("sage.numerical.backends.gurobi_backend",
               ["sage/numerical/backends/gurobi_backend.pyx"],
               libraries = ["gurobi"],
-              condition = os.path.isfile(SAGE_INC + "/gurobi_c.h") and
-                  os.path.isfile(SAGE_LOCAL + "/lib/libgurobi.so")),
+              condition = os.path.isfile(os.environ.get('GUROBI_DIR', '') + "/include/gurobi_c.h") and
+                  os.path.isfile(os.environ.get('GUROBI_DIR', '') + "/lib/libgurobi.so")),
 
     OptionalExtension("sage.numerical.backends.cplex_backend",
               ["sage/numerical/backends/cplex_backend.pyx"],
               libraries = ["cplex"],
-              condition = os.path.isfile(SAGE_INC + "/cplex.h") and
-                  os.path.isfile(SAGE_LOCAL + "/lib/libcplex.a")),
+              condition = os.path.isfile(os.environ.get('CPLEX_DIR', '') + "/include/cplex.h") and
+                  os.path.isfile(os.environ.get('CPLEX_DIR', '') + "/lib/libcplex.a")),
 
     OptionalExtension("sage.numerical.backends.coin_backend",
               ["sage/numerical/backends/coin_backend.pyx"],
@@ -1470,8 +1467,8 @@ ext_modules = [
               libraries=['brial', 'brial_groebner'] + m4ri_libs + png_libs,
               library_dirs = m4ri_library_dirs + png_library_dirs,
               include_dirs = m4ri_include_dirs + png_include_dirs,
-              depends = [SAGE_INC + "/polybori/" + hd + ".h" for hd in ["polybori", "config"] ] +
-                        [SAGE_INC + '/m4ri/m4ri.h'],
+              depends = [os.environ.get('PBORI_DIR', '') + "/include/polybori/" + hd + ".h" for hd in ["polybori", "config"] ] +
+                        [os.environ.get('PBORI_DIR', '') + '/include/m4ri/m4ri.h'],
               extra_compile_args = m4ri_extra_compile_args),
 
     Extension('sage.rings.polynomial.polynomial_real_mpfr_dense',
diff --git a/src/sage/combinat/cluster_algebra_quiver/mutation_type.py b/src/sage/combinat/cluster_algebra_quiver/mutation_type.py
index 759ca74..b8cb91f 100644
--- a/src/sage/combinat/cluster_algebra_quiver/mutation_type.py
+++ b/src/sage/combinat/cluster_algebra_quiver/mutation_type.py
@@ -1248,9 +1248,8 @@ def load_data(n):
         sage: def test_database(n):
         ....:     import os.path
         ....:     from six.moves import cPickle
-        ....:     from sage.env import SAGE_SHARE
         ....:     relative_filename = 'cluster_algebra_quiver/mutation_classes_%s.dig6'%n
-        ....:     filename = os.path.join(SAGE_SHARE, relative_filename)
+        ....:     filename = os.path.join(os.environ.get('DATABASE_MUTATION_CLASS_DIR', ''), 'share', relative_filename)
         ....:     f = open(filename,'r')
         ....:     data = cPickle.load(f)
         ....:     f.close()
@@ -1275,14 +1274,14 @@ def load_data(n):
     """
     import os.path
     from six.moves import cPickle
-    from sage.env import DOT_SAGE, SAGE_SHARE
+    from sage.env import DOT_SAGE
     relative_filename = 'cluster_algebra_quiver/mutation_classes_%s.dig6'%n
     getfilename = lambda path: os.path.join(path,relative_filename)
     # we check
     # - if the data is stored by the user, and if this is not the case
     # - if the data is stored by the optional package install
     data_dict = dict()
-    for filename in [getfilename(DOT_SAGE),getfilename(SAGE_SHARE)]:
+    for filename in [getfilename(DOT_SAGE),getfilename(os.path.join(os.environ.get('DATABASE_MUTATION_CLASS_DIR', ''), 'share'))]:
         if os.path.isfile(filename):
             f = open(filename,'r')
             data_new = cPickle.load(f)
diff --git a/src/sage/combinat/designs/latin_squares.py b/src/sage/combinat/designs/latin_squares.py
index ffaccfc..84c9114 100644
--- a/src/sage/combinat/designs/latin_squares.py
+++ b/src/sage/combinat/designs/latin_squares.py
@@ -546,8 +546,8 @@ def MOLS_table(start,stop=None,compare=False,width=None):
         return
 
     if compare:
-        from sage.env import SAGE_SHARE
-        handbook_file = open(SAGE_SHARE+"/combinatorial_designs/MOLS_table.txt",'r')
+        import os
+        handbook_file = open(os.environ['COMBINATORIAL_DESIGN_DIR']+"/combinatorial_designs/MOLS_table.txt",'r')
         hb = [int(_) for _ in handbook_file.readlines()[9].split(',')]
         handbook_file.close()
 
diff --git a/src/sage/databases/cremona.py b/src/sage/databases/cremona.py
index f651e19..340c8f6 100644
--- a/src/sage/databases/cremona.py
+++ b/src/sage/databases/cremona.py
@@ -117,7 +117,7 @@ def build(name, data_tgz, largest_conductor=0, mini=False, decompress=True):
 
         sage: d = sage.databases.cremona.build('cremona','ecdata.tgz')   # not tested
     """
-    db_path = os.path.join(SAGE_SHARE,'cremona',name.replace(' ','_')+'.db')
+    db_path = os.path.join(os.environ.get('ELLIPTIC_CURVES_DIR', ''),'share','cremona',name.replace(' ','_')+'.db')
     if os.path.exists(db_path):
         raise RuntimeError('Please (re)move %s before building '%db_path \
                 + 'database')
@@ -608,7 +608,7 @@ class MiniCremonaDatabase(SQLDatabase):
         """
         self.name = name
         name = name.replace(' ','_')
-        db_path = os.path.join(SAGE_SHARE, 'cremona', name+'.db')
+        db_path = os.path.join(os.environ.get('ELLIPTIC_CURVES_DIR', ''), 'share', 'cremona', name+'.db')
         if build:
             if name is None:
                 raise RuntimeError('The database must have a name.')
@@ -1420,7 +1420,7 @@ class LargeCremonaDatabase(MiniCremonaDatabase):
         """
         self.name = name
         name = name.replace(' ','_')
-        db_path = os.path.join(SAGE_SHARE, 'cremona', name+'.db')
+        db_path = os.path.join(os.environ.get('CREMONA_ELLCURVE_DIR', ''), 'share', 'cremona', name+'.db')
         if build:
             if name is None:
                 raise RuntimeError('The database must have a name.')
diff --git a/src/sage/databases/cunningham_tables.py b/src/sage/databases/cunningham_tables.py
index b17b887..8a09863 100644
--- a/src/sage/databases/cunningham_tables.py
+++ b/src/sage/databases/cunningham_tables.py
@@ -6,7 +6,6 @@ import os
 from sage.misc.cachefunc import cached_function
 from sage.rings.integer import Integer
 from sage.structure.sage_object import load
-from sage.env import SAGE_SHARE
 
 @cached_function
 def cunningham_prime_factors():
@@ -15,7 +14,7 @@ def cunningham_prime_factors():
     They occur in the factorization of numbers of type $b^n+1$ or $b^n-1$ with $b \in \{2,3,5,6,7,10,11,12\}$.
     Data from http://cage.ugent.be/~jdemeyer/cunningham/
     """
-    file = os.path.join(SAGE_SHARE,'cunningham_tables','cunningham_prime_factors.sobj')
+    file = os.path.join(os.environ.get('CUNNINGHAM_TABLES_DIR', ''),'share','cunningham_tables','cunningham_prime_factors.sobj')
     if os.path.exists(file):
         return [Integer(_) for _ in load(file)]
     else:
diff --git a/src/sage/databases/db_modular_polynomials.py b/src/sage/databases/db_modular_polynomials.py
index b75b38b..0e0c790 100644
--- a/src/sage/databases/db_modular_polynomials.py
+++ b/src/sage/databases/db_modular_polynomials.py
@@ -31,8 +31,7 @@ def _dbz_to_string(name):
         '0\n1\n'
     """
     import bz2, os
-    from sage.env import SAGE_SHARE
-    dblocation = os.path.join(SAGE_SHARE, 'kohel')
+    dblocation = os.path.join(os.environ.get('KHOEL_DIR', ''), 'share', 'kohel')
     filename = os.path.join(dblocation, name)
 
     try:
diff --git a/src/sage/databases/jones.py b/src/sage/databases/jones.py
index ebe4abf..9b11a42 100644
--- a/src/sage/databases/jones.py
+++ b/src/sage/databases/jones.py
@@ -70,13 +70,12 @@ import os
 
 from sage.rings.all import NumberField, RationalField, PolynomialRing
 from sage.misc.misc import powerset
-from sage.env import SAGE_SHARE
 
 from sage.structure.sage_object import load, save
 
 from sage.misc.package import PackageNotFoundError
 
-JONESDATA = os.path.join(SAGE_SHARE, 'jones')
+JONESDATA = os.path.join(os.environ.get('JONES_DIR', ''), 'share', 'jones')
 
 
 def sortkey(K):
diff --git a/src/sage/databases/odlyzko.py b/src/sage/databases/odlyzko.py
index 489cd67..e5a92cd 100644
--- a/src/sage/databases/odlyzko.py
+++ b/src/sage/databases/odlyzko.py
@@ -23,7 +23,6 @@ AUTHORS:
 import os
 
 from sage.structure.sage_object import load
-from sage.env import SAGE_SHARE
 from sage.misc.all import verbose
 
 def zeta_zeros():
@@ -54,6 +53,6 @@ def zeta_zeros():
         sage: len(zz)            # optional - database_odlyzko_zeta
         2001052
     """
-    sobj = os.path.join(SAGE_SHARE, 'odlyzko', 'zeros.sobj')
+    sobj = os.path.join(os.environ.get('ODLYZKO_DIR', ''), 'share', 'odlyzko', 'zeros.sobj')
     verbose("Loading Odlyzko database from " + sobj)
     return load(sobj)
diff --git a/src/sage/databases/sloane.py b/src/sage/databases/sloane.py
index d536858..2d6ad94 100644
--- a/src/sage/databases/sloane.py
+++ b/src/sage/databases/sloane.py
@@ -90,7 +90,6 @@ import re
 from six.moves.urllib.request import urlretrieve
 
 from sage.misc.all import verbose
-from sage.env import SAGE_SHARE
 import sage.rings.integer_ring
 ZZ = sage.rings.integer_ring.IntegerRing()
 from sage.misc.superseded import deprecation
@@ -105,7 +104,7 @@ class SloaneEncyclopediaClass:
         """
         Initialize the database but do not load any of the data.
         """
-        self.__path__ = os.path.join(SAGE_SHARE, 'sloane')
+        self.__path__ = os.path.join(os.environ.get('SLOANE_DIR', ''), 'share', 'sloane')
         self.__file__ = os.path.join(self.__path__, 'sloane-oeis.bz2')
         self.__file_names__ = os.path.join(self.__path__, 'sloane-names.bz2')
         self.__loaded__ = False
diff --git a/src/sage/databases/stein_watkins.py b/src/sage/databases/stein_watkins.py
index 3bf373a..6cd9594 100644
--- a/src/sage/databases/stein_watkins.py
+++ b/src/sage/databases/stein_watkins.py
@@ -139,8 +139,6 @@ from six.moves import range
 import bz2
 import os
 
-from sage.env import SAGE_SHARE
-
 class SteinWatkinsIsogenyClass:
     def __init__(self, conductor):
         self.conductor = conductor
@@ -185,7 +183,7 @@ class SteinWatkinsAllData:
             raise RuntimeError("num (=%s) must be a nonnegative integer"%num)
         name = str(num)
         name = '0'*(3-len(name)) + name
-        self._file = os.path.join(SAGE_SHARE, 'stein_watkins', 'a.%s.bz2'%name)
+        self._file = os.path.join(os.environ.get('STEIN_WATKINS_DIR', ''), 'share', 'stein_watkins', 'a.%s.bz2'%name)
         self._iter = iter(self)
 
     def __repr__(self):
@@ -319,7 +317,7 @@ class SteinWatkinsPrimeData(SteinWatkinsAllData):
             raise RuntimeError("num (=%s) must be a nonnegative integer"%num)
         name = str(num)
         name = '0'*(2-len(name)) + name
-        self._file = os.path.join(SAGE_SHARE,'stein_watkins', 'p.%s.bz2'%name)
+        self._file = os.path.join(os.environ.get('STEIN_WATKINS_DIR', ''), 'share', 'stein_watkins', 'p.%s.bz2'%name)
         self._iter = iter(self)
 
     def __repr__(self):
diff --git a/src/sage/databases/symbolic_data.py b/src/sage/databases/symbolic_data.py
index 2acd792..ca9bd2c 100644
--- a/src/sage/databases/symbolic_data.py
+++ b/src/sage/databases/symbolic_data.py
@@ -76,8 +76,7 @@ class SymbolicData:
             sage: sd = SymbolicData(); sd # optional - database_symbolic_data
             SymbolicData with 372 ideals
         """
-        from sage.env import SAGE_SHARE
-        path = os.path.join(SAGE_SHARE, 'symbolic_data')
+        path = os.path.join(os.environ.get('SYMBOLIC_DATA_DIR', ''), 'share', 'symbolic_data')
         self.__intpath = path + "/Data/XMLResources/INTPS/"
         self.__genpath = path + "/Data/XMLResources/GenPS/"
 
diff --git a/src/sage/env.py b/src/sage/env.py
index d713536..c3f9a1e 100644
--- a/src/sage/env.py
+++ b/src/sage/env.py
@@ -180,11 +180,6 @@ else:
 
 _add_variable_or_fallback('SINGULAR_SO', SINGULAR_SO)
 
-if not SINGULAR_SO or not os.path.exists(SINGULAR_SO):
-    raise RuntimeError(
-        "libSingular not found--a working Singular install in $SAGE_LOCAL "
-        "is required for Sage to work")
-
 # post process
 if ' ' in DOT_SAGE:
     if UNAME[:6] == 'CYGWIN':
diff --git a/src/sage/graphs/graph_plot_js.py b/src/sage/graphs/graph_plot_js.py
index 4c22f7a..2cdfb0c 100644
--- a/src/sage/graphs/graph_plot_js.py
+++ b/src/sage/graphs/graph_plot_js.py
@@ -302,7 +302,7 @@ def gen_html_code(G,
     js_code_file.close()
 
     # Add d3.js script depending on whether d3js package is installed.
-    d3js_filepath = os.path.join(SAGE_SHARE, 'd3js', 'd3.min.js')
+    d3js_filepath = os.path.join(os.environ.get('D3JS_DIR', ''), 'd3js', 'd3.min.js')
     if os.path.exists(d3js_filepath):
         with open(d3js_filepath, 'r') as d3js_code_file:
             d3js_script = '<script>' + d3js_code_file.read() + '</script>'
diff --git a/src/sage/graphs/lovasz_theta.py b/src/sage/graphs/lovasz_theta.py
index f150dca..c0029d4 100644
--- a/src/sage/graphs/lovasz_theta.py
+++ b/src/sage/graphs/lovasz_theta.py
@@ -64,7 +64,6 @@ def lovasz_theta(graph):
     from networkx import write_edgelist
     from sage.misc.temporary_file import tmp_filename
     import os, subprocess
-    from sage.env import SAGE_LOCAL
     from sage.misc.package import is_package_installed, PackageNotFoundError
 
     if not is_package_installed('csdp'):
@@ -76,5 +75,5 @@ def lovasz_theta(graph):
     tf.write(str(n)+'\n'+str(g.number_of_edges())+'\n')
     write_edgelist(g, tf, data=False)
     tf.close()
-    lines = subprocess.check_output([os.path.join(SAGE_LOCAL, 'bin', 'theta'), tf_name])
+    lines = subprocess.check_output([os.path.join(os.environ.get('CSDP_DIR', ''), 'bin', 'theta'), tf_name])
     return float(lines.split()[-1])
diff --git a/src/sage/graphs/strongly_regular_db.pyx b/src/sage/graphs/strongly_regular_db.pyx
index 19aa6e2..817cf55 100644
--- a/src/sage/graphs/strongly_regular_db.pyx
+++ b/src/sage/graphs/strongly_regular_db.pyx
@@ -3213,8 +3213,8 @@ cdef load_brouwer_database():
         return
     import json
 
-    from sage.env import SAGE_SHARE
-    with open(SAGE_SHARE+"/graphs/brouwer_srg_database.json",'r') as datafile:
+    from sage.env import GRAPHS_DATA_DIR
+    with open(GRAPHS_DATA_DIR+"/brouwer_srg_database.json",'r') as datafile:
         _brouwer_database = {(v,k,l,mu):{'status':status,'comments':comments}
                              for (v,k,l,mu,status,comments) in json.load(datafile)}
 
diff --git a/src/sage/interfaces/gap.py b/src/sage/interfaces/gap.py
index aa17d85..a9dc43b 100644
--- a/src/sage/interfaces/gap.py
+++ b/src/sage/interfaces/gap.py
@@ -179,7 +179,7 @@ from six import string_types
 
 from .expect import Expect, ExpectElement, FunctionElement, ExpectFunction
 from .gap_workspace import gap_workspace_file, prepare_workspace_dir
-from sage.env import SAGE_LOCAL, SAGE_EXTCODE
+from sage.env import SAGE_LOCAL, SAGE_EXTCODE, GAP_ROOT_DIR
 from sage.misc.misc import is_in_string
 from sage.misc.superseded import deprecation
 from sage.misc.cachefunc import cached_method
@@ -196,7 +196,7 @@ import string
 
 WORKSPACE = gap_workspace_file()
 
-GAP_BINARY = os.path.join(SAGE_LOCAL, 'bin', 'gap')
+GAP_BINARY = os.path.join(GAP_ROOT_DIR, 'bin', 'gap.sh')
 
 first_try = True
 
diff --git a/src/sage/interfaces/jmoldata.py b/src/sage/interfaces/jmoldata.py
index 10277cc..8f16c0a 100644
--- a/src/sage/interfaces/jmoldata.py
+++ b/src/sage/interfaces/jmoldata.py
@@ -22,7 +22,6 @@ from __future__ import print_function
 
 from sage.structure.sage_object import SageObject
 
-from sage.env import SAGE_LOCAL
 from sage.misc.temporary_file import tmp_filename
 
 import subprocess
@@ -148,7 +147,7 @@ class JmolData(SageObject):
             True
         """
         # Set up paths, file names and scripts
-        jmolpath = os.path.join(SAGE_LOCAL, "share", "jmol", "JmolData.jar")
+        jmolpath = os.path.join(os.environ.get('JMOL_DIR', ''), "share", "jmol", "JmolData.jar")
         target_native = targetfile
         import sys
         if sys.platform == 'cygwin':
diff --git a/src/sage/interfaces/lie.py b/src/sage/interfaces/lie.py
index 179aead..5f87bdd 100644
--- a/src/sage/interfaces/lie.py
+++ b/src/sage/interfaces/lie.py
@@ -290,7 +290,7 @@ from __future__ import absolute_import
 
 from .expect import Expect, ExpectElement, ExpectFunction, FunctionElement, AsciiArtString
 from sage.misc.all import prod
-from sage.env import DOT_SAGE, SAGE_LOCAL
+from sage.env import DOT_SAGE
 from sage.interfaces.tab_completion import ExtraTabCompletion
 from sage.docs.instancedoc import instancedoc
 import os
@@ -331,7 +331,7 @@ class LiE(ExtraTabCompletion, Expect):
                         prompt = '> ',
 
                         # This is the command that starts up your program
-                        command = "bash "+ SAGE_LOCAL + "/bin/lie",
+                        command = "bash "+ os.environ.get('LIE_DIR', '') + "/bin/lie",
 
                         server=server,
                         script_subdirectory = script_subdirectory,
@@ -401,7 +401,7 @@ class LiE(ExtraTabCompletion, Expect):
 
 
         for f in filenames:
-            filename = SAGE_LOCAL + "/lib/LiE/" + f
+            filename = os.environ.get('LIE_DIR', '') + "/lib/LiE/" + f
             info = open(filename)
             prev_command = ""
             help_text = ""
@@ -953,7 +953,7 @@ def lie_version():
         sage: lie_version() # optional - lie
         '2.1'
     """
-    f = open(os.path.join(SAGE_LOCAL, 'lib', 'LiE', 'INFO.0'))
+    f = open(os.path.join(os.environ.get('LIE_DIR', ''), 'lib', 'LiE', 'INFO.0'))
     lines = f.readlines()
     f.close()
     i = lines.index('@version()\n')
diff --git a/src/sage/interfaces/singular.py b/src/sage/interfaces/singular.py
index 5c5ca52..e9d1639 100644
--- a/src/sage/interfaces/singular.py
+++ b/src/sage/interfaces/singular.py
@@ -2279,7 +2279,6 @@ def generate_docstring_dictionary():
         sage: from sage.interfaces.singular import generate_docstring_dictionary
         sage: generate_docstring_dictionary()
     """
-    from sage.env import SAGE_LOCAL
 
     global nodes
     global node_names
@@ -2287,7 +2286,8 @@ def generate_docstring_dictionary():
     nodes.clear()
     node_names.clear()
 
-    singular_docdir = SAGE_LOCAL+"/share/info/"
+    import os
+    singular_docdir = os.environ['SINGULARPATH']+"/../info/"
 
     new_node = re.compile("File: singular\.hlp,  Node: ([^,]*),.*")
     new_lookup = re.compile("\* ([^:]*):*([^.]*)\..*")
diff --git a/src/sage/repl/ipython_kernel/install.py b/src/sage/repl/ipython_kernel/install.py
index 3912b8c..326c8d8 100644
--- a/src/sage/repl/ipython_kernel/install.py
+++ b/src/sage/repl/ipython_kernel/install.py
@@ -109,7 +109,7 @@ class SageKernelSpec(object):
             sage: os.path.isdir(mathjax)
             True
         """
-        src = os.path.join(SAGE_LOCAL, 'share', 'mathjax')
+        src = os.environ.get('MATHJAX_DIR', '')
         dst = os.path.join(self.nbextensions_dir, 'mathjax')
         self.symlink(src, dst)
 
@@ -126,7 +126,7 @@ class SageKernelSpec(object):
             sage: os.path.isdir(jsmol)
             True
         """
-        src = os.path.join(SAGE_LOCAL, 'share', 'jsmol')
+        src = os.path.join(os.environ.get('JSMOL_DIR', ''), 'share', 'jsmol')
         dst = os.path.join(self.nbextensions_dir, 'jsmol')
         self.symlink(src, dst)
 
@@ -143,7 +143,7 @@ class SageKernelSpec(object):
             sage: os.path.isdir(threejs)
             True
         """
-        src = os.path.join(SAGE_LOCAL, 'share', 'threejs')
+        src = os.environ.get('THREEJS_DIR', '')
         dst = os.path.join(self.nbextensions_dir, 'threejs')
         self.symlink(src, dst)
 
diff --git a/src/sage/repl/rich_output/backend_ipython.py b/src/sage/repl/rich_output/backend_ipython.py
index 5085c3d..98fe5e9 100644
--- a/src/sage/repl/rich_output/backend_ipython.py
+++ b/src/sage/repl/rich_output/backend_ipython.py
@@ -368,8 +368,7 @@ class BackendIPythonCommandline(BackendIPython):
         if not jdata.is_jvm_available() and not DOCTEST_MODE:
             raise RuntimeError('jmol cannot run, no suitable java version found')
         launch_script = output_jmol.launch_script_filename()
-        from sage.env import SAGE_LOCAL
-        jmol_cmd = os.path.join(SAGE_LOCAL, 'bin', 'jmol')
+        jmol_cmd = os.path.join(os.environ.get('JMOL_DIR', ''), 'bin', 'jmol')
         if not DOCTEST_MODE:
             os.system('{0} {1} 2>/dev/null 1>/dev/null &'
                       .format(jmol_cmd, launch_script))
diff --git a/src/sage/structure/graphics_file.py b/src/sage/structure/graphics_file.py
index 2645888..fec28c2 100644
--- a/src/sage/structure/graphics_file.py
+++ b/src/sage/structure/graphics_file.py
@@ -190,8 +190,7 @@ class GraphicsFile(SageObject):
         with open(launch_script, 'w') as f:
             f.write('set defaultdirectory "{0}"\n'.format(self.filename()))
             f.write('script SCRIPT\n')
-        from sage.env import SAGE_LOCAL
-        JMOL = os.path.join(SAGE_LOCAL, 'bin', 'jmol')
+        JMOL = os.path.join(os.environ.get('JMOL_DIR', ''), 'bin', 'jmol')
         os.system('{0} {1} 2>/dev/null 1>/dev/null &'
                   .format(JMOL, launch_script))
 
diff --git a/src/sage/interfaces/gp.py b/src/sage/interfaces/gp.py
index ad5bf3d..244b915 100644
--- a/src/sage/interfaces/gp.py
+++ b/src/sage/interfaces/gp.py
@@ -250,9 +250,9 @@ class Gp(ExtraTabCompletion, Expect):
         # list of directories where gp will look for scripts (only current working directory)
         self._eval_line('default(path,".");')
         # location of elldata, seadata, galdata
-        self._eval_line('default(datadir, "$SAGE_LOCAL/share/pari");')
+        self._eval_line('default(datadir, "$PARI_DATA_DIR/share/pari");')
         # executable for gp ?? help
-        self._eval_line('default(help, "$SAGE_LOCAL/bin/gphelp -detex");')
+        self._eval_line('default(help, "gphelp -detex");')
         # logfile disabled since Expect already logs
         self._eval_line('default(log,0);')
         # set random seed
