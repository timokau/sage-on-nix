diff --git a/src/sage/interfaces/ecm.py b/src/sage/interfaces/ecm.py
index b14aacc..bfdad7c 100644
--- a/src/sage/interfaces/ecm.py
+++ b/src/sage/interfaces/ecm.py
@@ -313,11 +313,12 @@ class ECM(SageObject):
 
     _found_input_re = re.compile('Found input number N')
 
+    # "Found probable prime factor of 17 digits: 79792266297612017"
     _found_factor_re = re.compile(
-        'Found (?P<primality>.*) factor of [\s]*(?P<digits>\d+) digits: (?P<factor>\d+)')
+        '(?P<primality>prime|composite) factor of [\s]*(?P<digits>\d+) digits: (?P<factor>\d+)')
 
     _found_cofactor_re = re.compile(
-        '(?P<primality>.*) cofactor (?P<cofactor>\d+) has [\s]*(?P<digits>\d+) digits')
+        '(?P<primality>prime|composite) cofactor (?P<cofactor>\d+) has [\s]*(?P<digits>\d+) digits')
 
     def _parse_output(self, n, out):
         """
@@ -393,15 +394,13 @@ class ECM(SageObject):
             if m is not None:
                 factor = m.group('factor')
                 primality = m.group('primality')
-                assert primality in ['prime', 'composite']
                 result += [(ZZ(factor), primality == 'prime')]
                 continue  # cofactor on the next line
             m = self._found_cofactor_re.match(line)
             if m is not None:
                 cofactor = m.group('cofactor')
                 primality = m.group('primality')
-                assert primality in ['Prime', 'Composite']
-                result += [(ZZ(cofactor), primality == 'Prime')]
+                result += [(ZZ(cofactor), primality == 'prime')]
                 # assert len(result) == 2
                 return result
         raise ValueError('failed to parse ECM output')
