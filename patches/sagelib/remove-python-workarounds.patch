diff --git a/build/bin/sage-pip-install b/build/bin/sage-pip-install
index ebb4978..c016f1c 100755
--- a/build/bin/sage-pip-install
+++ b/build/bin/sage-pip-install
@@ -57,33 +57,12 @@ if [ $(echo "$name" | wc -l) -gt 1 ]; then
 fi
 
 
-# We should avoid running pip2/3 while uninstalling a package because that
-# is prone to race conditions. Therefore, we use a lockfile while
-# running pip. This is implemented in the Python script pip2/3-lock.
-
-# Keep uninstalling as long as it succeeds
-while true; do
-    out=$($PIP-lock uninstall --disable-pip-version-check -y "$name" 2>&1)
-    if [ $? -ne 0 ]; then
-        break
-    fi
-    echo "$out"
-done
-
-# Not ideal, but this is the easiest way to check if the package
-# was not installed to begin with (which pip2/3 treats as an error).
-# If it wasn't, then we proceed quietly; if it was installed show the
-# uninstallation output and error out.
-if [[ "$out" != *"not installed" ]]; then
-    echo >&2 "$out"
-    exit 1
-fi
 
 # Finally actually do the installation (the "SHARED" tells pip2/3-lock
 # to apply a shared lock)
 echo "Installing package $name using $PIP"
 
-$PIP-lock SHARED install $pip_install_flags .
+$PIP install --prefix="$out" --no-cache $pip_install_flags .
 if [ $? -ne 0 ]; then
     echo >&2 "Error: installing with $PIP failed"
     exit 3
diff --git a/build/bin/sage-python23 b/build/bin/sage-python23
index 25abc6b..db5f453 100755
--- a/build/bin/sage-python23
+++ b/build/bin/sage-python23
@@ -1,31 +1,3 @@
 #!/usr/bin/env bash
 
-
-# Run the Python interpreter that we are currently building Sage with
-#
-# An existing Python is a build-time dependency for Sage, but
-# sometimes packages need to specifically run the one in Sage and not
-# just any Python interpreter.
-#
-# This is similar to the sage-pip-install script, which you should be
-# using for installing Python packages if at all possible.
-
-
-if [ "$SAGE_PYTHON3" = yes ]; then
-   PYTHON="$SAGE_LOCAL/bin/python3"
-else
-   PYTHON="$SAGE_LOCAL/bin/python2"
-fi
-
-# Check that Python is actually installed and issue an error message if not--in
-# particular if this was run from an spkg-install before Python is installed
-# this indicates that Python should be a dependency of that package.
-if [ ! -x "$PYTHON" ]; then
-     echo >&2 "Error: Tried to use Sage's Python which was not yet installed."
-     echo >&2 'If this was called from an spkg-install script for another '
-     echo >&2 'package you should add $(PYTHON) as a dependency in '
-     echo >&2 'build/pkgs/<pkg>/dependencies'
-     exit 1
-fi
-
-exec $PYTHON "$@"
+python "$@"
